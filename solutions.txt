1.1
 sum([ x for x in range(1,1001) if not (x%3 and x%5) ])
1.2
 [ word for word in random_words if word[0] in ['a','e','i','o','u'] ] 
1.3
 [ x for sl in l for x in sl ] 
1.4
 # thanks Usman for the improved solution!
 print '\n'.join(["Fizz"(i%3==0) + "Buzz"(i%5==0) or i for i in range(1,21)])
2.1
 words.sort(key=lambda x: x[2]) 
2.2
 q = lambda l: l if not l else q([ x for x in l if x < l[0]]) + l[:1] + q([ x for x in l if x > l[0]])
3.1
 len(filter(lambda x: len(x)%2 == 0, words))
3.2
 map(lambda x: int(x)+2, list)
3.3
 min(filter(lambda x: x!=min(list), list))
3.4
 reduce(lambda x, y: x if x > y else y, list)
3.5
 reduce(lambda x,y: x if x<y else y, filter(lambda x: x!=reduce(lambda x,y: x if x<y else y, list), list))
4.1
 def paragraph(function):
     def wrapper(*args):
         return "<p>"+function(*args)+'</p>'
 
     return wrapper
4.2
 class HTMLTag(object):
     def __init__(self, tag):
         assert type(tag) == str
         self.tag = tag
 
     def __call__(self, func):
         def wrapper(*args):
             return '<{tag}>{string}</{tag}>'.format(tag=self.tag, string=func(*args))
         return wrapper
4.3
 class count(object):
     def __init__(self):
         self.count = 0
 
     def __call__(self, func):
         def wrapper(*args):
             self.count += 1
             func(*args)
             print "{name} called {count} times".format(name=func.__name__, count=self.count)
         return wrapper
5.1
 def squared():
     i=1
     while i < 100:
         yield i**2
         i+=1

 def squared_even():
     i=2
     while i < 100:
         yield i**2
         i+=2
5.2
 def is_prime(n):
     if n == 1:
         return True
     for i in xrange(2,n):
         if n%i == 0:
             return False
     return True

 def primes():
     n = 1
     while True:
         yield n
         while True:
             n+=1
             if is_prime(n):
                 break
